[
["index.html", "Fishing in OBIS with R: interacting programatically with the marine biodiversity Preface", " Fishing in OBIS with R: interacting programatically with the marine biodiversity Eduardo Klein Last Build: 2017-08-16 Preface This book is intended to show how to interact with the global biodiversity database OBIS using the packages developed by OBIS IT team. It is primary about the robis package OBIS can be accessed by its portal. In there you can retrieve summary pages for countries, species, selected areas, etc. You can even download the retrieved data using the very fast and efficient OBIS Downloader. However if you’re are planning more detailed analysis or you require more sophisticated searches, you need the OBIS R packages. This book is intended for a public that knows how to use R. This is not a course in R: many good tutorials exist in the Internet. However, it will start with the very basic functions showing with examples its main functionalities, and will continue with more complex applications. It also includes a section on how to performs OBIS standard control quality checks on the data (Vandepitte et al. 2015). This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["about-the-author.html", "About the Author", " About the Author Eduardo Klein is a Marine Biologist with more than 25 years of academic experience in teaching, research and consultant work in marine ecology, environmental impact assessment, and environmental baseline studies, with extensive use of statistical/numerical methods for the analysis of ecological data. His research is focused specifically on the analysis of complex geospatial layers to model and evaluate marine biodiversity patterns, human impacts on marine ecosystems, specially those related to the oil industry. He has also lead projects to configure a system for the selection of priority conservation areas for the marine and terrestrial biodiversity. He collaborate with the CDB/EBSA process, and is part of the team of trainers for the CBD Sustainable Ocean Initiative SOI. He is currently co-chair of the Steering Group of the Ocean Biogeographic Information System project (IOC/IODE – OBIS), and the coordinator of the Caribbean Regional node for OBIS. He also collaborates actively with the GOOS Biology and Ecosystem panel and the Marine Biodiversity Observation Network MBON. Eduardo Klein is an Associate Professor of the Department of Environmental Studies at Universidad Simón Bolívar, in Caracas, Venezuela "],
["introduction.html", "1 Introduction", " 1 Introduction "],
["the-basics.html", "2 The Basics", " 2 The Basics OBIS is a continuously growing database of georeferenced registers of marine organisms. As August 2017, OBIS had 48.4 millions of records from +2,200 data sets provided by more than 800 institutes around the world. It contains locations of +114,000 marine species, from bacteria to whales. As a network of regional nodes, OBIS is continuously growing. The Portal is the most common way to interact with OBIS (figure 2.1). The Portal could provide you tables, charts and maps, and also allows you to download the data through the OBIS Download Tool. The downloader is very efficient and it could combine some filter to narrow your search. Figure 2.1: OBIS main Portal page OBIS has a manual with very detailed information about how to the system. Also you can always contact the regional node closer to your location if you have any questions. For example, suppose that you’re interested in the biodiversity statistics of one particular country, say, Australia. You start typing the name of the country in the Country Statistics box (or select it using the pull down facility) and press enter. You will have in return a page that summarises the biodiversity assets OBIS has for Australia. In the summary pages you can have several informative plots and tables, and you can download it just by clicking on the download button. However, if you need to interact programmatically with OBIS, you will probably need the OBIS R packages. "],
["the-main-functions.html", "3 The Main Functions 3.1 Specifing the Geometry 3.2 The checklist function 3.3 The occurrence function 3.4 OBIS Quality Control Flags", " 3 The Main Functions 3.1 Specifing the Geometry One of the most important parameters for all robis function is the geometry. If you’re interested in the extraction of OBIS data only for your region of interest (ROI), you should define that area as a geometry. OBIS can handle different types of geometries, as long as they are described in Well-Known Text (WKT) terms. Your ROI could be a point or a line in the map, but more frequently is a polygon that encircle your ROI. This are the ways to define a geometry uin WKT terms (“Well-Known Text” 2017): Point: POINT (30 10) Line: LINESTRING (30 10, 10 30, 40 40) Polygon: POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10)) OBIS can also handle multipart geometries: Multi points: MULTIPOINT ((10 40), (40 30), (20 20), (30 10)) Multi lines: MULTILINESTRING ((10 10, 20 20, 10 40), (40 40, 30 30, 40 20, 30 10)) Multi polygons: MULTIPOLYGON (((30 20, 45 40, 10 40, 30 20)), ((15 5, 40 10, 10 20, 5 10, 15 5))) In the case of the polygons, the last point of the geometry must coincide with the first one There are many ways to get the geometry in WKT from your ROI. The more obvious is perhaps entering the coordinates of your ROI as a series of points and store this geometry in a R variable. OBIS has a map tool (figure 3.1) that allows you to draw a point, line or polygon on a map and get the WKT terms for the geometry you draw. Figure 3.1: OBIS map tool Other option is to use your favorite GIS software to draw your ROI and then export as a WKT. Here is one example usig QGIS (figure 3.2) Figure 3.2: Drawing a ROI in QGIS In QGIS, save the new layer as CSV file and then scroll down and change the geometry type to “AS_WKT” in the “Layer Options” section. Normally one is interested in a ROI that includes a section of a coastline. In this case the geometry could be very complex, with many nodes and the server could take some time to process the complex geographical query. Here are some tips to select a geometry that will run efficiently in the server: Draw your geometry as simple as possible. Make a “loose” geometry in your favorite tool Avoid WKT terms with too many decimal places. For example, at the Equator, 1km is aprox. 0.009 degrees. You probably don’t need to go down to 1m resolution which is 0.000009 degrees (6 decimals). If you are covering a coastal area, draw few strait lines inland that includes the coastline. If there is any OBIS record in land you always have the oportunity to filter it out later (e.g. using the QC flags) Simplify your geometry using the mapshaper tool. This online application reduces the number of nodes of your geometry interactively (figure 3.3), so you can see the final result. For the moment is not possible to save the result in WKT terms, so you need to convert the resultant shape file or GeoJSON to WKT terms using other tools. Figure 3.3: Mapshaper tool. Moving the slider changes the parameters of the smoothing algortihm Now you have your ROI described as a WKT, you could store it as a R variable, for example: wkt = &quot;POLYGON ((-59.238 10.487, -78.398 7.710, -90.263 15.876, -87.714 21.371, -80.330 24.206, -71.015 21.371, -60.644 20.961, -57.919 14.008, -59.238 10.487))&quot; The ROI defined above is an area that covers “loosely” the Caribbean Sea: suppressPackageStartupMessages(library(sp)) suppressPackageStartupMessages(library(mapview)) suppressPackageStartupMessages(library(rgeos)) ## save the geometry as a variable wkt = &quot;POLYGON ((-59.238 10.487, -78.398 7.710, -90.263 15.876, -87.714 21.371, -80.330 24.206, -71.015 21.371, -60.644 20.961, -57.919 14.008, -59.238 10.487))&quot; ## This is just for plotting the geometry. Not needed for working with robis ## First convert the ROI WKT into a sp object roi = readWKT(wkt) ## assign the reference projection so it can be ploted on top of a map latlong = &quot;+init=epsg:4326&quot; ## lat/lon coordinates system proj4string(roi) = CRS(latlong) ## and map it mapview(roi, map.types=&quot;Esri.OceanBasemap&quot;) 3.2 The checklist function Maybe the first question you may have abou the biodiversity of one ROI is: What and how many taxa are present? Once defined the ROI, the function checklist will provide you with that answer. The formal definition of checklist is: checklist(scientificname = NULL, year = NULL, obisid = NULL, aphiaid = NULL, resourceid = NULL, areaid = NULL, startdate = NULL, enddate = NULL, startdepth = NULL, enddepth = NULL, geometry = NULL, qc = NULL, verbose = FALSE) where the arguments are scientificname is the name of the taxon you’re interested. It oculd be any taxonomical level, e.g. “Pterois volitans” or “Scorpaenidae”. year the year of collection, e.g 1998. obisid is the internal ID of the taxa in OBIS. You can see this number in the URL of the summary page of the taxon, e.g. the Lion Fish is 501883. aphiaid is the ID of the taxa in WorMS. e.g. again the Lion fish is 159559. resourceid is the ID of one of the datasets in OBIS. You can see this number in the URL of the resource page. E.g. the Ichthyology Collection of the Royal Ontario Museum has 3511 as ID areaid is the ID internal to OBIS of the area. You can see this number in the URL of the area page, e.g. the area ID of the Clipperton Atoll is 391. startdate, enddate is the range of dates (as character), in ISO format, when to do the search. e.g. ‘1998-01-31’ and ‘2000-12-31’. startdepth, enddepth is the depth range where to do the search. Depth is always a positive number &gt; 0. geometry the ROI described in WKT terms. See section 3.1. qc a vector of the qc numbers you want to filter out. See section 3.4. verbose if TRUE returns detailed information on the API call. Usefull for internal debbuging. The returned data frame contains information about several internal and external IDs (“id”, “valid_id”, “parent_id”, “worms_id”), the taxonomy of the taxon ( “phylum”, “order”, “family”, “genus”, “species”, “class”, “tauthor”), the numbers of records and dataset that report the species (“records”, “datasets”). The lowest taxonomical level of the record is provided in the variable “tname” and the level in “rank_name”. Variable Description id Internal OBIS ID valid_id internal OBIS ID parent_id WoRMS ID of the upper taxonomical level rank_name Name of the taxonomical level tname Name of the taxon records Number of records available datasets Number of dataset that provide records of the taxon phylum Phylum class Class order Order family Familiy genus Genus species Species tauthor Author of the taxon name worms_id ID form WoRMS redlist Is the taxon in the IUCN red list? status red List Categoryu of the taxon gisd Is the taxon in the IUCN invasive species list hab Is the taxon listed in the Harmful Algae Database checklist produces also few very interesting variables that indicate if the taxon is in the red list (redlist , is a invasive species (gisd) or is in the harmful algae data base (hab). Note that OBIS accepts any taxonimocal level, as long it is a valid name matched with WoRMS. Not all the records in the checklist data frame are necessarily species! 3.2.1 Examples Remember first load the robis package 3.2.1.1 List of Taxa from a geometry To extract the list of taxa from a geometry you have to define first the geometry (see 3.1) and pass the WKT terms to the checklist geometry attribute: ## load he package library(robis) ## define a simple geometry wkt = &quot;POLYGON ((140 -40, 150 -40, 150 -45, 140 -45, 140 -40))&quot; ## get the checklist taxa = checklist(geometry = wkt) Retrieved 2000 records of 2961 (67%) Retrieved 2961 records of 2961 (100%) DT::datatable(taxa) In this case, the resultant data frame contains 2961 records with 19 columns or variables. 3.2.1.2 One taxon in the database To extract the checklist information of one specific taxon without any geographical restriction, you omit any area or geometry: taxa = checklist(&quot;Pterois volitans&quot;) ## the lion fish Retrieved 1 records of 1 (100%) knitr::kable(t(taxa)) id 501083 valid_id 501083 parent_id 501069 rank_name Species tname Pterois volitans tauthor (Linnaeus, 1758) worms_id 159559 gisd TRUE records 1646 datasets 40 phylum Chordata order Scorpaeniformes family Scorpaenidae genus Pterois species Pterois volitans class Actinopterygii In this case, the number of records is always one. 3.2.1.3 Extract the checklist in a geometry between to years You can specify the year range (and also the dates ranges) as an attribute of the function. Pass the years as a vector of numbers: taxa = checklist(&quot;Pachyptila turtur&quot;, geometry = wkt, year = c(1990:1995)) ## Fairy Prion Retrieved 1 records of 1 (100%) knitr::kable(t(taxa)) id 484207 valid_id 484207 parent_id 754237 rank_name Species tname Pachyptila turtur tauthor (Kuhl, 1820) worms_id 212648 redlist TRUE status LC records 1196 datasets 3 phylum Chordata order Procellariiformes family Procellariidae genus Pachyptila species Pachyptila turtur class Aves 3.2.1.4 Extract checklist from a pre-defined area. This is normally much ore efficient than using a user defined geometry as OBIS has some searches already catched. See for example the records correspondign to area ID 9 (Australia); taxa = checklist(&quot;Pachyptila turtur&quot;, areaid = 9) ## Fairy Prion in Australia Retrieved 1 records of 1 (100%) knitr::kable(t(taxa)) id 484207 valid_id 484207 parent_id 754237 rank_name Species tname Pachyptila turtur tauthor (Kuhl, 1820) worms_id 212648 redlist TRUE status LC records 2478 datasets 6 phylum Chordata order Procellariiformes family Procellariidae genus Pachyptila species Pachyptila turtur class Aves 3.2.1.5 Red List Species How many of the taxa reported for an area are listed in the red list catalogue and what is the distribution of records in the IUCN categories taxa = checklist(geometry = wkt) Retrieved 2000 records of 2961 (67%) Retrieved 2961 records of 2961 (100%) taxa.special = data.frame(redlist = sum(taxa$redlist==&quot;TRUE&quot;, na.rm=T), invasive = sum(taxa$gisd==&quot;TRUE&quot;, na.rm=T), HAB = sum(taxa$hab==&quot;TRUE&quot;, na.rm=T)) knitr::kable(taxa.special) redlist invasive HAB 323 11 29 table(taxa$status) CR DD EN LC LR/lc NT VU 3 45 13 198 1 29 34 3.2.1.6 Taxa frequency plot. Make a plot of the frequency of lowest taxonomic level registered for the record in a ROI taxa = checklist(geometry = wkt) Retrieved 2000 records of 2961 (67%) Retrieved 2961 records of 2961 (100%) taxa.ranks = table(taxa$rank_name) barplot(sort(taxa.ranks, decreasing = T), horiz = T, las=2, xlab = &quot;Number of records&quot;, cex.names = 0.7, col = &quot;steelblue&quot;) So from that result, from a total of 2961 taxa reported, the number of them registered at Species level is 2115 3.3 The occurrence function When you’re looking for the individual records of one species or group of species (or any taxa) in an area, the function occurrence will perform the search and retunr a data frame with many variables (configurable) The formal definition of occurrence is: occurrence(scientificname = NULL, year = NULL, obisid = NULL, aphiaid = NULL, resourceid = NULL, nodeid = NULL, areaid = NULL, startdate = NULL, enddate = NULL, startdepth = NULL, enddepth = NULL, geometry = NULL, qc = NULL, verbose = FALSE) where the arguments are scientificname is the name of the taxon you’re interested. It oculd be any taxonomical level, e.g. “Pterois volitans” or “Scorpaenidae”. year the year of collection, e.g 1998. obisid is the internal ID of the taxa in OBIS. You can see this number in the URL of the summary page of the taxon, e.g. the Lion Fish is 501883. aphiaid is the ID of the taxa in WorMS. e.g. again the Lion fish is 159559. resourceid is the ID of one of the datasets in OBIS. You can see this number in the URL of the resource page. E.g. the Ichthyology Collection of the Royal Ontario Museum has 3511 as ID areaid is the ID internal to OBIS of the area. You can see this number in the URL of the area page, e.g. the area ID of the Clipperton Atoll is 391. startdate, enddate is the range of dates (as character), in ISO format, when to do the search. e.g. ‘1998-01-31’ and ‘2000-12-31’. startdepth, enddepth is the depth range where to do the search. Depth is always a positive number &gt; 0. geometry the ROI described in WKT terms. See section 3.1. qc a vector of the qc numbers you want to filter out. See section 3.4. verbose if TRUE returns detailed information on the API call. Usefull for internal debbuging. 3.4 OBIS Quality Control Flags "],
["QCtools.html", "4 Performing QC with R", " 4 Performing QC with R There is another package (in development) that provides some function to perform some of the Quality Control checks on the data, prior to the formal upload to OBIS. The package obistools was designed with the idea to provide some help to the data managers in the most common routines for checking the format and validity of many of the fields of the Darwin Core required by OBIS. Most of the functions can be executed off-line. However, one of the most relevant, match_taxa(), requires to connect with the World Register of Marine Species WoRMS using Internet. "],
["advanced-examples.html", "5 Advanced Examples 5.1 Generate a list of Species 5.2 Time Series of taxa 5.3 Extracting Endagered/Invasive Species 5.4 Aggregating registers in bins 5.5 Calculating Biodiverisity Indices", " 5 Advanced Examples 5.1 Generate a list of Species 5.2 Time Series of taxa 5.3 Extracting Endagered/Invasive Species 5.4 Aggregating registers in bins 5.5 Calculating Biodiverisity Indices "],
["references.html", "References", " References "]
]
